[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-release-automation"
version = "1.0.0"
description = "AI-driven release automation system using ModuLink chains"
authors = [
    {name = "Orchestrate, LLC", email = "contact@orchestrate.com"}
]
readme = "README.md"
license = {text = "Apache-2.0"}
keywords = [
    "release",
    "automation", 
    "ai",
    "llm",
    "git",
    "semantic-versioning",
    "modulink",
    "chains",
    "devops"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Build Tools",
    "Topic :: Software Development :: Version Control :: Git",
    "Topic :: System :: Software Distribution",
    "Operating System :: OS Independent",
]
requires-python = ">=3.8"
dependencies = [
    "modulink-py>=1.0.0",
    "pyyaml>=6.0",
    "gitpython>=3.1.0",
    "jinja2>=3.0.0",
    "click>=8.0.0",
    "requests>=2.28.0",
    "packaging>=21.0",
    "semantic-version>=2.10.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
    "isort>=5.10.0",
    "pre-commit>=2.20.0",
]
ai = [
    "openai>=1.0.0",
    "anthropic>=0.3.0",
    "ollama>=0.1.0",
]
github = [
    "pygithub>=1.58.0",
    "github3.py>=3.2.0",
]
all = [
    "ai-release-automation[dev,ai,github]",
]

[project.urls]
Homepage = "https://github.com/orchestrate-solutions/ai-release-automation"
Repository = "https://github.com/orchestrate-solutions/ai-release-automation"
Documentation = "https://github.com/orchestrate-solutions/ai-release-automation/blob/main/docs/"
Issues = "https://github.com/orchestrate-solutions/ai-release-automation/issues"
Changelog = "https://github.com/orchestrate-solutions/ai-release-automation/blob/main/CHANGELOG.md"

[project.scripts]
ai-release = "release_system.cli.release_cli:main"
auto-commit = "auto_commit:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["release_system*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
"release_system" = [
    "config/*.yaml",
    "config/*.yaml.example", 
    "standards/*.yaml",
    "templates/*.j2",
]

# Development tools configuration
[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "git.*",
    "yaml.*",
    "jinja2.*",
    "modulink.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--tb=short",
    "--cov=release_system",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "ai: marks tests that require AI model access",
]

[tool.coverage.run]
source = ["release_system"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
